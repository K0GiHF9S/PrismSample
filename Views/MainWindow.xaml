<mah:MetroWindow x:Class="PrismSample.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:prism="http://prismlibrary.com/"
		xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
		xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
		xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
		xmlns:views="clr-namespace:PrismSample.Views"
		xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
		xmlns:viewmodels="clr-namespace:PrismSample.ViewModels"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:behaviors="clr-namespace:PrismSample.Behaviors"
		mc:Ignorable="d"
		d:DataContext="{d:DesignInstance Type=viewmodels:MainWindowViewModel}"
		Title="{Binding Title.Value}" Style="{StaticResource WindowStyle}" Height="350" Width="525" >
	<i:Interaction.Behaviors>
		<behaviors:WindowClosingBehavior
			ClosingCallbackCommand="{Binding ConfirmClose}"
			/>
	</i:Interaction.Behaviors>
	<i:Interaction.Triggers>
		<i:EventTrigger EventName="Closed">
			<l:DataContextDisposeAction />
		</i:EventTrigger>
	</i:Interaction.Triggers>
	<Grid>
		<md:DialogHost
            Identifier="RootDialog"
            DialogTheme="Inherit"
			CloseOnClickAway="True"
            SnackbarMessageQueue="{Binding ElementName=MainSnackbar, Path=MessageQueue}"
			>
			<md:DrawerHost
                IsLeftDrawerOpen="{Binding ElementName=MenuToggleButton, Path=IsChecked}">
				<md:DrawerHost.LeftDrawerContent>
					<DockPanel MinWidth="220">
						<ToggleButton 
                            Style="{StaticResource MaterialDesignHamburgerToggleButton}" 
                            DockPanel.Dock="Top"
                            HorizontalAlignment="Right" 
                            Margin="16"
                            IsChecked="{Binding ElementName=MenuToggleButton, Path=IsChecked, Mode=TwoWay}"
							/>
						<TextBox 
                        x:Name="DemoItemsSearchBox"
                        Text="{Binding SearchKeyword, UpdateSourceTrigger=PropertyChanged}"
                        DockPanel.Dock="Top"
                        Margin="16, 4"
                        Width="200"
                        md:HintAssist.Hint="Search"
                        md:HintAssist.IsFloating="True"
                        md:TextFieldAssist.HasClearButton="True"
                        md:TextFieldAssist.HasOutlinedTextField="True"
                        md:TextFieldAssist.DecorationVisibility="Collapsed"
                        md:TextFieldAssist.TextFieldCornerRadius="4"/>

						<ListBox 
                        x:Name="DemoItemsListBox" 
                        Margin="0 16 0 16"
                        SelectedIndex="{Binding SelectedIndex}"
                        SelectedItem="{Binding SelectedItem, UpdateSourceTrigger=PropertyChanged}"
                        ItemsSource="{Binding DemoItems}"
                        AutomationProperties.Name="DemoPagesListBox"
                        >
							<ListBox.Resources>
								<Style TargetType="ScrollBar" BasedOn="{StaticResource MaterialDesignScrollBarMinimal}"/>
							</ListBox.Resources>
							<ListBox.ItemTemplate>
								<DataTemplate DataType="domain:DemoItem">
									<TextBlock Text="{Binding Name}" Margin="24 4 0 4" AutomationProperties.AutomationId="DemoItemPage"/>
								</DataTemplate>
							</ListBox.ItemTemplate>
						</ListBox>
					</DockPanel>
				</md:DrawerHost.LeftDrawerContent>

				<DockPanel>
					<md:ColorZone
                    Padding="16"
                    md:ShadowAssist.ShadowDepth="Depth2"
                    Mode="PrimaryMid"
                    DockPanel.Dock="Top">
						<DockPanel>
							<StackPanel Orientation="Horizontal">
								<ToggleButton
                                x:Name="MenuToggleButton"
                                Style="{StaticResource MaterialDesignHamburgerToggleButton}"
                                IsChecked="False"
                                AutomationProperties.Name="HamburgerToggleButton"/>

								<Button
                                Margin="24,0,0,0"
                                ToolTip="Previous Item"
                                Command="{Binding MovePrevCommand}"
                                Content="{md:PackIcon Kind=ArrowLeft, Size=24}"
                                Style="{DynamicResource MaterialDesignToolButton}"
                                Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"
                                md:RippleAssist.Feedback="{Binding RelativeSource={RelativeSource Self}, Path=Foreground, Converter={StaticResource BrushRoundConverter}}"/>

								<Button 
                                Margin="16,0,0,0"
                                ToolTip="Next Item"
                                Command="{Binding MoveNextCommand}"
                                Content="{md:PackIcon Kind=ArrowRight, Size=24}"
                                Style="{DynamicResource MaterialDesignToolButton}"
                                Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"
                                md:RippleAssist.Feedback="{Binding RelativeSource={RelativeSource Self}, Path=Foreground, Converter={StaticResource BrushRoundConverter}}"/>

								<Button
                                Margin="16,0,0,0"
                                ToolTip="Home"
                                Command="{Binding HomeCommand}"
                                Content="{md:PackIcon Kind=Home, Size=24}"
                                Style="{DynamicResource MaterialDesignToolButton}"
                                Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"
                                md:RippleAssist.Feedback="{Binding RelativeSource={RelativeSource Self}, Path=Foreground, Converter={StaticResource BrushRoundConverter}}"/>
							</StackPanel>

							<md:PopupBox
                            DockPanel.Dock="Right"
                            PlacementMode="BottomAndAlignRightEdges"
                            StaysOpen="False">

								<StackPanel>
									<Grid Margin="10">
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										<Grid.RowDefinitions>
											<RowDefinition />
											<RowDefinition />
										</Grid.RowDefinitions>
										<TextBlock
                                        Text="Light"
                                        Margin="0 0 10 0"/>
										<ToggleButton
                                        x:Name="DarkModeToggleButton"
                                        Grid.Column="1"/>
										<TextBlock
                                        Text="Dark"
                                        Margin="10 0 0 0"
                                        Grid.Column="2"/>
										<TextBlock
                                        Text="Enabled"
                                        Margin="0 10 10 0"
                                        Grid.Row="1"/>
										<ToggleButton
                                        x:Name="ControlsEnabledToggleButton"
                                        Margin="0 10 0 0"
                                        IsChecked="{Binding ControlsEnabled}"
                                        Grid.Row="1"
                                        Grid.Column="1"/>
									</Grid>

									<Separator/>

									<Button
                                    Content="Hello World"
                                    />

									<Button
                                    Content="Nice Popup"
                                    />

									<Button
                                    Content="Can't Touch This"
                                    IsEnabled="False"/>

									<Separator/>

									<Button
                                    Content="Goodbye"
                                    />
								</StackPanel>
							</md:PopupBox>

							<TextBlock
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            FontSize="22"
                            AutomationProperties.Name="Material Design In XAML Toolkit"
                            Text="Material Design In XAML Toolkit"/>
						</DockPanel>
					</md:ColorZone>

					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>
						
						<ScrollViewer
                        x:Name="MainScrollViewer"
                        Grid.Row="1"
                        md:ScrollViewerAssist.IsAutoHideEnabled="True"
                        HorizontalScrollBarVisibility="{Binding SelectedItem.HorizontalScrollBarVisibilityRequirement, FallbackValue=Disabled}"
                        VerticalScrollBarVisibility="{Binding SelectedItem.VerticalScrollBarVisibilityRequirement, FallbackValue=Disabled}" >
							<ContentControl prism:RegionManager.RegionName="ContentRegion" />
						</ScrollViewer>

						<md:Snackbar
                        x:Name="MainSnackbar"
                        MessageQueue="{md:MessageQueue}"
                        Grid.Row="1"/>
					</Grid>
				</DockPanel>
			</md:DrawerHost>
		</md:DialogHost>
		<!--<StackPanel>
			<ToolBar
    Style="{DynamicResource MaterialDesignToolBar}"
				ToolBarTray.IsLocked="True"
    ClipToBounds="False">
				<Button
      ToolTip="Follow me on Twitter"
      Content="{md:PackIcon Kind=Twitter}" />
				<Button
      ToolTip="Save"
      Content="{md:PackIcon Kind=ContentSave}" />
				<Separator />
				<Button
      Command="Cut"
      ToolTip="Cut"
      ToolBar.OverflowMode="AsNeeded"
      Content="{md:PackIcon Kind=ContentCut}" />
				<Button
      Command="Copy"
      ToolTip="Copy that stuff"
      ToolBar.OverflowMode="AsNeeded"
      Content="{md:PackIcon Kind=ContentCopy}" />
				<Separator />
				<Button
      Command="Paste"
      ToolTip="Paste some stuff"
      ToolBar.OverflowMode="AsNeeded"
      Content="{md:PackIcon Kind=ContentPaste}" />
				--><!-- when badging in a toolbar, make sure the parent ToolBar.ClipToBounds="False", and
                   manually apply the button style --><!--
				<md:Badged
      ToolBar.OverflowMode="AsNeeded"
      Badge="{md:PackIcon Alert}"
      CornerRadius="5">
					<Button
        ToolTip="Badge it up!"
        Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
        Content="{md:PackIcon Kind=AirplaneTakeoff}" />
				</md:Badged>
				<Separator />
				<ListBox>
					<ListBoxItem
        ToolTip="This is a lonley toggle with TextBlock instead of icon">
						<TextBlock
          Text="W" />
					</ListBoxItem>
				</ListBox>
				<Separator />
				<ListBox
      SelectedIndex="0">
					<ListBox.ToolTip>
						<StackPanel>
							<TextBlock
            Text="MaterialDesignToolToggleFlatListBox" />
							<TextBlock
            Text="Exclusive selection" />
							<TextBlock
            Text="ListBoxAssist.IsToggle allows more natural toggle behaviour" />
						</StackPanel>
					</ListBox.ToolTip>
					<ListBoxItem
        Content="{md:PackIcon Kind=FormatAlignLeft}" />
					<ListBoxItem
        Content="{md:PackIcon Kind=FormatAlignCenter}" />
					<ListBoxItem
        Content="{md:PackIcon Kind=FormatAlignRight}" />
					<ListBoxItem
        Content="{md:PackIcon Kind=FormatAlignJustify}" />
				</ListBox>
				<Separator />
				<ListBox
      SelectionMode="Extended">
					<ListBox.ToolTip>
						<StackPanel>
							<TextBlock
            Text="MaterialDesignToolToggleListBox" />
							<TextBlock
            Text="Multiple selection" />
							<TextBlock
            Text="ListBoxAssist.IsToggle allows more natural toggle behaviour" />
						</StackPanel>
					</ListBox.ToolTip>
					<ListBoxItem
        Content="{md:PackIcon Kind=FormatBold}" />
					<ListBoxItem
        Content="{md:PackIcon Kind=FormatItalic}" />
					<ListBoxItem
        Content="{md:PackIcon Kind=FormatUnderline}" />
				</ListBox>
				<Separator />
				<Label
      Content="Font size:"
      VerticalAlignment="Center" />
				<ComboBox>
					<ComboBoxItem
        Content="10" />
					<ComboBoxItem
        IsSelected="True"
        Content="12" />
					<ComboBoxItem
        Content="14" />
					<ComboBoxItem
        Content="16" />
				</ComboBox>
				<CheckBox
      Content="Check" />
				<Button
      ToolTip="Take a nap"
      ToolBar.OverflowMode="Always"
      Content="{md:PackIcon Kind=Hotel}" />
				<RadioButton
      GroupName="XXX"
      Content="Radio" />
				<RadioButton
      GroupName="XXX"
      Content="Ga Ga" />
				<Separator />
				<RadioButton
      GroupName="YYY"
      Style="{DynamicResource MaterialDesignToolRadioButton}"
      Content="{md:PackIcon Kind=Radio}" />
				<RadioButton
      GroupName="YYY"
      Style="{DynamicResource MaterialDesignToolRadioButton}"
      Content="{md:PackIcon Kind=EmoticonPoop}" />
				<Separator />
				<ToggleButton />
			</ToolBar>
			<TabControl
  Style="{StaticResource MaterialDesignNavigatilRailTabControl}"
  md:ColorZoneAssist.Mode="Standard"
  md:ShadowAssist.ShadowDepth="Depth0">
				<TabItem
    Header="{md:PackIcon Kind=Heart, Size=24}"
    Style="{StaticResource MaterialDesignNavigationRailTabItem}" />
				<TabItem
    Header="{md:PackIcon Kind=Spade, Size=24}"
    Style="{StaticResource MaterialDesignNavigationRailTabItem}" />
			</TabControl>
		</StackPanel>-->
    </Grid>
</mah:MetroWindow>
